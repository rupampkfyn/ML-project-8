# -*- coding: utf-8 -*-
"""Project 8. CreditCard Fraud Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YLGWQYBoHkyRp3gNRiBWE_MiVeOESjKn

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# loading the dta in a pandas dataframe
credit_data = pd.read_csv('/content/drive/MyDrive/Project/creditcard.csv')

# first five rows of the dataframe
credit_data.head()

# checking the last five rows of the dataframe
credit_data.tail()

# dataset information
credit_data.info()

# checking the number of missing values in each column
credit_data.isnull().sum()

# distribution of legit transaction and fraudulent transaction
credit_data['Class'].value_counts()

"""This dataset is highly unbalanced

0--> Normal Transaction

1--> Fraudulent Transaction
"""

# seperating the data for analysis
legit = credit_data[credit_data.Class==0]
fraud = credit_data[credit_data.Class==1]

print(legit.shape)
print(fraud.shape)

# statistcial measures of the data
legit.Amount.describe()

fraud.Amount.describe()

# compare the values for both transactions
credit_data.groupby('Class').mean()

"""Under-Sampling

Build a sample dataset containing similar distribution of normal transaction and the fraudulent transaction

Number of Fraudulent Transaction --> 492
"""

legit_sample = legit.sample(n=492)

"""Concatenating two dataframes"""

new_dataset = pd.concat([legit_sample,fraud],axis=0)

new_dataset.head()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""Splitting the data into Features and Target"""

X = new_dataset.drop(columns='Class', axis=1)
Y = new_dataset['Class']

print(X)

print(Y)

"""Split the data into training data and test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training the Logistic regression Model with training data
model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data:',training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data:',test_data_accuracy)

